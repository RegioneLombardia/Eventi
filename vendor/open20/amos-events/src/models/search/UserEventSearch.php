<?php
/**
 * Created by PhpStorm.
 * User: michele.lafrancesca
 * Date: 05/03/2020
 * Time: 15:58
 */

namespace open20\amos\events\models\search;


use open20\amos\admin\models\UserProfile;
use open20\amos\admin\models\UserProfileAgeGroup;
use open20\amos\admin\utility\UserProfileUtility;
use open20\amos\community\models\CommunityUserMm;
use open20\amos\comuni\models\IstatComuni;
use open20\amos\comuni\models\IstatProvince;
use open20\amos\events\AmosEvents;
use open20\amos\events\models\Event;
use open20\amos\events\utility\EventsUtility;
use yii\base\Model;
use yii\db\ActiveQuery;
use yii\db\Query;
use yii\helpers\ArrayHelper;

class UserEventSearch extends Model
{
    const SEARCH_TYPE_ALL = 0;
    const SEARCH_TYPE_LIST_TAG = 2;
    const SEARCH_TYPE_SELECT_PARTICIPANT = 3;
    const SEARCH_TYPE_COMMUNICATION = 4;

    const FILTER_INCLUDE = 1;
    const FILTER_EXCLUDE = 2;

    public $event_id;
    public $type;
    public $tags;
    public $registered_invited;
    public $searchTags;

    /**
     *  [
     *      'include' => [
     *        'key' => 'value',
     *        'key' => 'value'
     *      ],
     *
     *      'exclude' => [
     *        'key' => 'value',
     *        'key' => 'value'
     *      ],
     *
     * ]
     *
     * @var array
     */
    public $includeExclude;
    public $field;
    public $value;


    /**
     *
     */
    public static function getListOfAttributes()
    {
        return [
            'sesso' => AmosEvents::t('amosevents', 'Genere'),
            'user_profile_age_group_id' => AmosEvents::t('amosevents', "Fascia d'etÃ "),
            'nascita_province_id' => AmosEvents::t('amosevents', "Provincia"),
            'nascita_comuni_id' => AmosEvents::t('amosevents', "Comune"),
            'tag_preference' => AmosEvents::t('amosevents', "Tag di preference centre")
        ];
    }

    /**
     * @param $field
     * @return array
     * @throws \yii\base\InvalidConfigException
     */
    public static function getAttributesValues($field)
    {
        $moduleEvents = \Yii::$app->getModule('events');

        switch ($field) {
            case 'sesso':
                return [
                    'None' => \Yii::t('amosadmin', 'Non dichiarato'),
                    'Maschio' => \Yii::t('amosadmin', 'Maschio'),
                    'Femmina' => \Yii::t('amosadmin', 'Femmina'),
                ];
                break;
            case 'user_profile_age_group_id':
                $ages = UserProfileAgeGroup::find()->all();
                return ArrayHelper::map($ages, 'id', 'age_group');
                break;
            case 'nascita_province_id':
                $province = IstatProvince::find();
                if (!empty($moduleEvents->showOnlyRegionInWizard)) {
                    $province->andWhere(['istat_regioni_id' => $moduleEvents->showOnlyRegionInWizard]);
                }
                return ArrayHelper::map($province->all(), 'id', 'nome');
                break;
            case 'nascita_comuni_id':
                $comuni = IstatComuni::find();
                if (!empty($moduleEvents->showOnlyRegionInWizard)) {
                    $comuni->andWhere(['istat_regioni_id' => $moduleEvents->showOnlyRegionInWizard])
                        ->orderBy('istat_comuni.nome ASC');
                }
                return ArrayHelper::map($comuni->all(), 'id', 'nome');
                break;
            case 'tag_preference':
                $tags = EventsUtility::getPreferenceCenterTags();
                return ArrayHelper::map($tags, 'id', 'nome');
                break;
            default:
                return [];
        }
    }


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [['registered_invited', 'searchTags', 'event_id', 'type', 'tags', 'includeExclude', 'field', 'value'], 'safe']
        ];
    }

    /**
     * @param $params
     * @param bool $isCount
     * @return int|string|ActiveQuery
     * @throws \yii\base\InvalidConfigException
     */
    public function search($params, $isCount = true)
    {
        $eventModule = \Yii::$app->getModule('events');
        /** @var  $query ActiveQuery */
        $query = UserProfile::find()
            ->distinct()
            ->andWhere(['user_profile.attivo' => 1])
            ->andWhere(['NOT LIKE', 'user_profile.nome', UserProfileUtility::DELETED_ACCOUNT_NAME])
            ->innerJoinWith('user');
        if($eventModule && !empty($eventModule->user_profile_privacy_attr)){
            $query->andWhere([$eventModule->user_profile_privacy_attr => true]);
        }


//        pr($params);
        $this->load($params);
        $event = Event::findOne($this->event_id);

        $queryParticipants = UserProfile::find()
            ->select('user_profile.id')
            ->innerJoin('community_user_mm', 'community_user_mm.user_id = user_profile.user_id')
            ->innerJoin('event_invitation', 'event_invitation.user_id = community_user_mm.user_id')
            ->andWhere(['community_user_mm.community_id' => $event->community_id])
            ->andWhere(['is', 'community_user_mm.deleted_at', null]);

        if (!\Yii::$app->user->can('SUPER_USER_EVENT')) {
            $query->innerJoin('event_group_referent_mm', 'event_group_referent_mm.user_id = user.id')
                ->andWhere(['event_group_referent_mm.event_group_referent_id' => $event->event_group_referent_id]);
        }

        $includes = [];
        $excludes = [];
        foreach ($this->includeExclude as $key => $value) {
            if ($value == self::FILTER_INCLUDE) {
//                $includes []= ['attribute' => $this->field[$key], 'value' => $this->value[$key]];
                $includes [$this->field[$key]] [] = $this->value[$key];
            } else {
                $excludes [] = ['attribute' => $this->field[$key], 'value' => $this->value[$key]];
            }
        }


        if ($this->type == self::SEARCH_TYPE_LIST_TAG) {
            $queryTag = new Query();
            $queryTag->from('entitys_tags_mm')
                ->innerJoin('event', 'event.id = entitys_tags_mm.record_id')
                ->andWhere(['entitys_tags_mm.tag_id' => $this->searchTags])
                ->andWhere(['classname' => Event::className()]);


            if ($this->registered_invited == 2) {
                $query->innerJoin('community_user_mm', 'community_user_mm.user_id = user_profile.user_id')
                    ->andWhere(['community_user_mm.status' => CommunityUserMm::STATUS_ACTIVE])
                    ->andWhere(['IS', 'community_user_mm.deleted_at', null])
                    ->andWhere(['community_user_mm.community_id' => $queryTag->select('event.community_id')])
                    ->andWhere(['!=', 'community_user_mm.community_id', $event->community_id]);
            } else {
                $query
                    ->innerJoin('event_invitation_sent', 'event_invitation_sent.user_id = user_profile.user_id')
                    ->innerJoin('event_internal_list', 'event_internal_list.id = event_invitation_sent.event_internal_list_id')
                    ->andWhere(['IS', 'event_internal_list.deleted_at', null])
                    ->andWhere(['IS', 'event_invitation_sent.deleted_at', null])
                    ->andWhere(['!=', 'event_internal_list.event_id', $this->event_id])
                    ->andWhere(['event_internal_list.event_id' => $queryTag->select('event.id')
                    ]);
            }


            foreach ($excludes as $exclude) {
                $query = $this->filterExclude($query, $exclude);
            }

            foreach ($includes as $attribute => $include) {
                $query = $this->filterInclude($query, $include, $attribute);
            }

        } //-------  SEARCH ALL USERS
        else {
            foreach ($includes as $attribute => $include) {
                $query = $this->filterInclude($query, $include, $attribute);
            }
            foreach ($excludes as $exclude) {
                $query = $this->filterExclude($query, $exclude);
            }
        }

        // ----- EXCLUDE USER ALREADY REGISTERD TO THE EVENT
        $query->andWhere(['NOT IN', 'user_profile.id', $queryParticipants]);
//        pr($query->createCommand()->rawSql);
//        pr($queryParticipants->createCommand()->rawSql);DIE;
        if ($isCount) {
            return $query->count();
        }
        return $query;
    }

    /**
     * @param $query ActiveQuery
     * @param $include
     */
    public function filterInclude($query, $include, $attribute)
    {
        if ($attribute == 'tag_preference') {
            $query->leftJoin('cwh_tag_owner_interest_mm', 'cwh_tag_owner_interest_mm.record_id = user_profile.id')
                ->andFilterWhere(['tag_id' => $include]);
        } else {
            if (count($include) > 0 && !empty($attribute)) {
                $query->andFilterWhere([$attribute => $include]);
            }
        }
        return $query;
    }


    /**
     * @param $query ActiveQuery
     * @param $exclude
     * @return mixed
     */
    public function filterExclude($query, $exclude)
    {
        if ($exclude['attribute'] == 'tag_preference') {
            $query->leftJoin('cwh_tag_owner_interest_mm', 'cwh_tag_owner_interest_mm.record_id = user_profile.id AND tag_id = ' . $exclude['value']);
        } else {
            if(!empty($exclude['value'])){
                $query->andWhere([
                    'OR',
                    [$exclude['attribute'] => null],
                    ['<>', $exclude['attribute'], $exclude['value']]
                ]);
            }


        }
        return $query;
    }

}