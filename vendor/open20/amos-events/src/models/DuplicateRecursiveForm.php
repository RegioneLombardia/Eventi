<?php
/**
 * Created by PhpStorm.
 * User: michele.lafrancesca
 * Date: 25/11/2020
 * Time: 15:16
 */

namespace open20\amos\events\models;


use open20\amos\events\AmosEvents;
use yii\base\Model;
use yii\data\ArrayDataProvider;

class DuplicateRecursiveForm extends Model
{

    const RECURSIVE_TYPE_DAY = 'recursive_type_day';
    const RECURSIVE_TYPE_WEEK = 'recursive_type_week';
    const RECURSIVE_TYPE_MONTH = 'recursive_type_month';
    const RECURSIVE_TYPE_YEAR = 'recursive_type_year';

    const DAY_OF_THE_WEEK_LUN = 'Mon';
    const DAY_OF_THE_WEEK_MART = 'Tue';
    const DAY_OF_THE_WEEK_MERC = 'Wed';
    const DAY_OF_THE_WEEK_GIOV = 'Thu';
    const DAY_OF_THE_WEEK_VEN = 'Fri';
    const DAY_OF_THE_WEEK_SAB = 'Sat';
    const DAY_OF_THE_WEEK_DOM = 'Sun';

    const END_DATE = 1;
    const END_AFTER = 2;

    const MONTH_DAY = 1;
    const MONTH_N_DAY_OF = 2;

    public $repeat_every_number = 1;
    public $repeat_every_type = self::RECURSIVE_TYPE_WEEK;
    public $day_of_the_week;
    public $day_of_month;

    public $end;
    public $end_date;
    public $end_after = 1;


    public $enableTimePeriod = false;
    public $timePeriodStart;
    public $timePeriodEnd;

    public $event_id = 1;


    public function rules()
    {
        return [
            [['enableTimePeriod', 'day_of_month', 'repeat_every_number', 'repeat_every_type', 'day_of_the_week', 'end', 'end_date', 'end_after', 'timePeriodStart', 'timePeriodEnd'], 'safe'],
            ['day_of_the_week', 'checkRequirements']
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

    }

    public function getAttributeLabel($attribute)
    {
        return [
            'repeat_every_number' => AmosEvents::t('amosevents', "Ripeti ogni"),
        ];
    }

    /**
     * @return array
     */
    public function getRecursiveTypes()
    {
        return [
            self::RECURSIVE_TYPE_DAY => AmosEvents::t('amosevents', "Day"),
            self::RECURSIVE_TYPE_WEEK => AmosEvents::t('amosevents', "Week"),
            self::RECURSIVE_TYPE_MONTH => AmosEvents::t('amosevents', "Month"),
            self::RECURSIVE_TYPE_YEAR => AmosEvents::t('amosevents', "Year"),
        ];
    }

    /**
     * @return array
     */
    public function getDaysOfTheWeek()
    {
        return [
            self::DAY_OF_THE_WEEK_LUN => AmosEvents::t('amosevents', "L"),
            self::DAY_OF_THE_WEEK_MART => AmosEvents::t('amosevents', "M"),
            self::DAY_OF_THE_WEEK_MERC => AmosEvents::t('amosevents', "M"),
            self::DAY_OF_THE_WEEK_GIOV => AmosEvents::t('amosevents', "G"),
            self::DAY_OF_THE_WEEK_VEN => AmosEvents::t('amosevents', "V"),
            self::DAY_OF_THE_WEEK_SAB => AmosEvents::t('amosevents', "S"),
            self::DAY_OF_THE_WEEK_DOM => AmosEvents::t('amosevents', "D"),
        ];
    }

    public function checkRequirements($attribute)
    {
        if ($this->repeat_every_type == self::RECURSIVE_TYPE_WEEK) {
//            if (empty($this->day_of_the_week) || empty($this->end_date)) {
//                $this->addError('end_date', AmosEvents::t('amosevents', "La data di fine  Ã¨ obbligatoria"));
//            }
        }
    }


    /**
     *
     */
    public function generateDates()
    {
        $event = Event::findOne($this->event_id);
        $now = new \DateTime();

        // if it is a passed event, start date is today
        $event_begin_date = new \DateTime($event->begin_date_hour);
        if($event_begin_date < $now){
            $event_begin_date = $now;
        }


            $event_end_date = new \DateTime($event->end_date_hour);
        $datesToGenerate = [];
//        pr($_POST);

        if ($this->repeat_every_type == self::RECURSIVE_TYPE_DAY) {
            $datesToGenerate = $this->recursiveTypeDay($event_begin_date);

        } else if ($this->repeat_every_type == self::RECURSIVE_TYPE_WEEK) {
            $datesToGenerate = $this->recursiveTypeWeek($event, $event_begin_date);

        } else if ($this->repeat_every_type == self::RECURSIVE_TYPE_MONTH) {
            $datesToGenerate = $this->recursiveTypeMonth($event_begin_date);

        } else if ($this->repeat_every_type == self::RECURSIVE_TYPE_YEAR) {
            $datesToGenerate = $this->recursiveTypeYear($event_begin_date);

        }

        $result = [];
        foreach ($datesToGenerate as $datetime) {
            if ($datetime != $event->begin_date_hour) {
                $endDate = $this->calculateEndDate($event, $datetime->format('Y-m-d H:i:s'));
                $result[] = [
                    'event' => $event->title,
                    'day_of_the_week' => AmosEvents::t('amosevents', $datetime->format('l')),
                    'date_begin' => $datetime->format('d/m/Y'),
                    'hour_begin' => $datetime->format('H:i'),
                    'date_end' => $endDate->format('d/m/Y'),
                    'hour_end' => $endDate->format('H:i'),
                    'date_begin_complete' => $datetime->format('Y-m-d H:i:s'),
                    'date_end_complete' => $endDate->format('Y-m-d H:i:s'),

                ];
            }
        }

        if ($this->enableTimePeriod && !empty($this->timePeriodStart) && !empty($this->timePeriodEnd)) {
            $result = $this->generateTimePeriods($result);
        }

//        pr($result);
//        die;
        $dataProvider = new ArrayDataProvider([
            'allModels' => $result
        ]);
        return $dataProvider;
    }

    /**
     * @param $dates
     */
    public function generateTimePeriods($dates)
    {
        $returnDates = [];
//        pr($this->enableTimePeriod,'enable');
//        pr($this->timePeriodStart,'timePeriodStart');
//        pr($this->timePeriodEnd,'timePeriodEnd');
        if ($this->enableTimePeriod && !empty($this->timePeriodStart) && !empty($this->timePeriodEnd)) {
            /** @var  $date \DateTime */
            foreach ($dates as $date) {
                $dateBegin = new \DateTime($date['date_begin_complete']);
                $dateEnd = new \DateTime($date['date_end_complete']);
                $done = false;
                foreach ($this->timePeriodStart as $key => $periodStart) {
                    $clonedDateBeg = clone $dateBegin;
                    $clonedDateEnd = clone $dateEnd;

                    if (!empty($periodStart) && !empty($this->timePeriodEnd[$key])) {
                        $explode = explode(':', $periodStart);
                        $periodEnd = $this->timePeriodEnd[$key];
                        $explodeEnd = explode(':', $periodEnd);

                        if (count($explode) == 2 && count($explodeEnd) == 2) {
                            $clonedDateBeg->setTime($explode[0], $explode[1], 0);
                            $clonedDateEnd->setTime($explodeEnd[0], $explodeEnd[1], 0);

                            $newDate = $date;
                            $newDate['date_begin_complete'] = $clonedDateBeg->format('Y-m-d H:i:s');
                            $newDate['hour_begin'] = $clonedDateBeg->format('H:i');
                            $newDate['date_end_complete'] = $clonedDateEnd->format('Y-m-d H:i:s');
                            $newDate['hour_end'] = $clonedDateEnd->format('H:i');
                            $returnDates[] = $newDate;
                            $done = true;
                        }
                    }
                }
                if (!$done) {
                    $returnDates[] = $date;
                }
            }
        }
        return $returnDates;
    }

    /**
     * @param $event
     * @param $event_begin_date
     */
    public function recursiveTypeWeek($event, $event_begin_date)
    {
        $weeks = $this->day_of_the_week;
        $endDate = new \DateTime($this->end_date);
//        $now = new \DateTime();
        $now = $event_begin_date;
        $repeat_every_number = $this->repeat_every_number - 1;

        $datesToGenerate = [];
        $i = 1;
        $end_type = $this->getEndValue();

//            pr($now, 'now');
//            pr($endDate, 'enddate');
//            pr($weeks, 'days of week');
//            pr($this->getEndValue(), 'end');
//            pr($end_type, 'endtype');
//            pr($this->end_after, 'after');

        if ($end_type == self::END_DATE) {
            while ($endDate >= $now) {
                if (in_array($now->format('D'), $weeks)) {
                    $datetime = new \DateTime($now->format('Y-m-d H:i:s'));
                    $datetime->setTime($event_begin_date->format('H'), $event_begin_date->format('i'));
                    $datesToGenerate[] = $datetime;
                }

                if ($repeat_every_number > 0 && $now->format('D') == 'Sun') {
                    $now->modify("+$repeat_every_number weeks");
                    $now->modify("+1 day");
                } else {
                    $now->modify("+1 day");
                }
            }
        } else if ($end_type == self::END_AFTER) {
            while ($i <= $this->end_after) {
                if (in_array($now->format('D'), $weeks)) {
                    $d = new \DateTime();
                    $datetime = new \DateTime($now->format('Y-m-d H:i:s'));
                    $datetime->setTime($event_begin_date->format('H'), $event_begin_date->format('i'));
                    $datesToGenerate[] = $datetime;
                    $i++;
                }
                if ($repeat_every_number > 0 && $now->format('D') == 'Sun') {
                    $now->modify("+$repeat_every_number weeks");
                    $now->modify("+1 day");
                } else {
                    $now->modify("+1 day");
                }
            }
        }

        return $datesToGenerate;
    }

    /**
     * @param $event_begin_date
     * @return array
     */
    public function recursiveTypeMonth($event_begin_date)
    {

        $endDate = new \DateTime($this->end_date);
        $repeat_every_number = $this->repeat_every_number;
//        $now = new \DateTime();
        $now = $event_begin_date;

        $datesToGenerate = [];
        $i = 1;
//        pr($repeat_every_number, 'n');
//        pr($event_begin_date, 'begin date');


        $end_type = $this->getEndValue();


        // ------- TYPE 2  - SECOND SUNDAY OF VERY MONTH
        if ($this->day_of_month == self::MONTH_N_DAY_OF) {
            $nDay = $this->getDayOfTheWeekMonth($event_begin_date->format('Y-m-d H:i:s'));
            $day = $event_begin_date->format('D');

            $n = 0;
            if ($end_type == self::END_DATE) {
                $now->modify('first day of this month');
                while ($endDate >= $now) {
                    if ($now->format('D') == $day) {
                        $n++;
                        if ($n == $nDay) {
                            $datetime = new \DateTime($now->format('Y-m-d H:i:s'));
                            $datetime->setTime($event_begin_date->format('H'), $event_begin_date->format('i'));
                            $datesToGenerate[] = $datetime;

                            for ($j = 1; $j <= $repeat_every_number; $j++) {
                                $now->modify("+1 month");
                            }
                            $now->modify('first day of this month');
                            $n = 0;
                        }

                    }
                    $now->modify("+1 day");

                }
            } else if ($end_type == self::END_AFTER) {
                while ($i <= $this->end_after) {
                    if ($now->format('D') == $day) {
                        $n++;
                        if ($n == $nDay) {
                            $datetime = new \DateTime($now->format('Y-m-d H:i:s'));
                            $datetime->setTime($event_begin_date->format('H'), $event_begin_date->format('i'));
                            $datesToGenerate[] = $datetime;
                            $i++;

                            for ($j = 1; $j <= $repeat_every_number; $j++) {
                                $now->modify("+1 month");
                            }
                            $now->modify('first day of this month');
                            $n = 0;
                        }

                    }
                    $now->modify("+1 day");

                }
            }
            // ---- TYPE 1 - THE 20 EVERY MONTH
        } else {

            if ($end_type == self::END_DATE) {
                while ($endDate >= $now) {
                    $datetime = new \DateTime($now->format('Y-m-d H:i:s'));
                    $datetime->setTime($event_begin_date->format('H'), $event_begin_date->format('i'));
                    $datesToGenerate[] = $datetime;

                    for ($j = 1; $j <= $repeat_every_number; $j++) {
                        $now->modify("+1 month");
                    }
                }
            } else if ($end_type == self::END_AFTER) {
                while ($i <= $this->end_after) {
                    $datetime = new \DateTime($now->format('Y-m-d H:i:s'));
                    $datetime->setTime($event_begin_date->format('H'), $event_begin_date->format('i'));
                    $datesToGenerate[] = $datetime;
                    $i++;

                    for ($j = 1; $j <= $repeat_every_number; $j++) {
                        $now->modify("+1 month");
                    }
                }
            }
        }
        return $datesToGenerate;

    }


    /**
     * @param $event_begin_date \DateTime
     */
    public function recursiveTypeDay($event_begin_date)
    {
        $endDate = new \DateTime($this->end_date);
        $repeat_every_number = $this->repeat_every_number;
//        $now = new \DateTime();
        $now = $event_begin_date;

        $datesToGenerate = [];
        $i = 1;

        $end_type = $this->getEndValue();
        if ($end_type == self::END_DATE) {
            while ($endDate >= $now) {
                $datetime = new \DateTime($now->format('Y-m-d H:i:s'));
                $datetime->setTime($event_begin_date->format('H'), $event_begin_date->format('i'));
                $datesToGenerate[] = $datetime;
                $now->modify("+$repeat_every_number day");
            }
        } else if ($end_type == self::END_AFTER) {
            while ($i <= $this->end_after) {
                $datetime = new \DateTime($now->format('Y-m-d H:i:s'));
                $datetime->setTime($event_begin_date->format('H'), $event_begin_date->format('i'));
                $datesToGenerate[] = $datetime;
                $i++;
                $now->modify("+$repeat_every_number day");
            }
        }
        return $datesToGenerate;

    }


    /**
     * @param $event_begin_date \DateTime
     */
    public function recursiveTypeYear($event_begin_date)
    {
        $endDate = new \DateTime($this->end_date);
        $repeat_every_number = $this->repeat_every_number;
//        $now = new \DateTime();
        $now = $event_begin_date;
        $datesToGenerate = [];
        $i = 1;

        $end_type = $this->getEndValue();
        if ($end_type == self::END_DATE) {
            while ($endDate >= $now) {
                $datetime = new \DateTime($now->format('Y-m-d H:i:s'));
                $datetime->setTime($event_begin_date->format('H'), $event_begin_date->format('i'));
                $datesToGenerate[] = $datetime;
                $now->modify("+$repeat_every_number year");
            }
        } else if ($end_type == self::END_AFTER) {
            while ($i <= $this->end_after) {
                $datetime = new \DateTime($now->format('Y-m-d H:i:s'));
                $datetime->setTime($event_begin_date->format('H'), $event_begin_date->format('i'));
                $datesToGenerate[] = $datetime;
                $i++;
                $now->modify("+$repeat_every_number year");
            }
        }
        return $datesToGenerate;

    }

    /**
     * @return int|null|string
     */
    public function getEndValue()
    {
        foreach ($this->end as $type => $value) {
            if (!empty($value))
                return $type;
        }
        return null;
    }

    /**
     * @param $dateString
     * @return int
     */
    public static function getDayOfTheWeekMonth($dateString)
    {
        $date = new \DateTime($dateString);
        $dateCloned = clone $date;
        $dayOfWeek = $date->format('D');
        $dateCloned->modify('first day of this month');
//        pr($dateCloned, 'first day');
//        pr($date, 'date');
        $i = 0;
        while ($dateCloned <= $date) {
            if ($dateCloned->format('D') == $dayOfWeek) {
                $i++;
            }
            $dateCloned->modify('+1 day');
        }
        return $i;
    }

    /**
     * @param $event
     * @param $dateString
     */
    public function calculateEndDate($event, $dateString)
    {

        $oldBeginDate = new \DateTime($event->begin_date_hour);
        $oldEndDate = new \DateTime($event->end_date_hour);
        $diff = $oldBeginDate->diff($oldEndDate);

        $endDate = new \DateTime($dateString);
        $endDate = $endDate->add($diff);
        return $endDate;
    }


}